import{_ as h,r as n,o as p,c as d,b as a,d as e,e as i,a as t}from"./app-538399c4.js";const c={},o=t('<h1 id="継続的インテグレーション" tabindex="-1"><a class="header-anchor" href="#継続的インテグレーション" aria-hidden="true">#</a> 継続的インテグレーション</h1><p>〜コードに対する早いフィードバック〜</p><h2 id="継続的インテグレーション-ci-continuous-integration-とは" tabindex="-1"><a class="header-anchor" href="#継続的インテグレーション-ci-continuous-integration-とは" aria-hidden="true">#</a> 継続的インテグレーション（CI: continuous integration）とは</h2><p>ソフトウェアの開発プロセスの中で、定期的、自動的にビルド、テストを実施するプラクティスです。</p><h2 id="なぜ継続的インテグレーションをするのか" tabindex="-1"><a class="header-anchor" href="#なぜ継続的インテグレーションをするのか" aria-hidden="true">#</a> なぜ継続的インテグレーションをするのか</h2><h3 id="ソフトウェアを常に動く状態になっているのを保証する" tabindex="-1"><a class="header-anchor" href="#ソフトウェアを常に動く状態になっているのを保証する" aria-hidden="true">#</a> ソフトウェアを常に動く状態になっているのを保証する</h3><p>ソフトウェアの開発終盤にいきなり統合し、</p><p>動かすのはとてもリスキーですし、まともに動かない場合もあるでしょう。</p><p>継続的インテグレーションで開発の初期から定期的にビルドを行い、</p><p>ソフトウェアを常に動く状態を保ち、それを保証します。</p><h3 id="品質を作り込む" tabindex="-1"><a class="header-anchor" href="#品質を作り込む" aria-hidden="true">#</a> 品質を作り込む</h3><p>開発プロセスの中で品質を作り込み、製品にバグを出さないようにするために行います。</p><p>開発後にまとめてテストをするのではなく、</p><p>開発中から品質を担保することで無駄を無くします。</p><h2 id="どうやっておこなうのか" tabindex="-1"><a class="header-anchor" href="#どうやっておこなうのか" aria-hidden="true">#</a> どうやっておこなうのか</h2><h3 id="前提条件" tabindex="-1"><a class="header-anchor" href="#前提条件" aria-hidden="true">#</a> 前提条件</h3><p>自動化されたテストが必要です。</p><p><a href="/practices/test-driven-development">テスト駆動開発</a>などのプラクティスを使うことで</p><p>意識せずとも自動テストをアプリケーションに組み込むことができます。</p><h3 id="ciパイプラインの構築" tabindex="-1"><a class="header-anchor" href="#ciパイプラインの構築" aria-hidden="true">#</a> CIパイプラインの構築</h3><p>ソフトウェアの開発プロセスの中で、定期的、自動的にビルド、テストを実施するようなCIパイプラインを構築します。</p><p>次に紹介するCIツールを使うのが一般的です。</p><h3 id="ciツール" tabindex="-1"><a class="header-anchor" href="#ciツール" aria-hidden="true">#</a> CIツール</h3><p>具体的なツールに関してはご自身で調べて実施してみてください。</p><p>かなり普及しているプラクティスなので</p><p>ネット上にたくさんの情報があります。</p><p>例を挙げると</p><ul><li>Jenkins</li><li>Travis</li><li>GitLab CI</li><li>CircleCI</li><li>TeamCity</li><li>Bamboo</li></ul><p>などがあります。</p><h3 id="失敗にすぐに気づけるようにする" tabindex="-1"><a class="header-anchor" href="#失敗にすぐに気づけるようにする" aria-hidden="true">#</a> 失敗にすぐに気づけるようにする</h3><p>失敗に気づけるようにしましょう。</p><p>失敗に気づくのが1週間後とかになってしまったら</p><p>それまで作ったものに不具合がないのかどうかが不明確になってしまいます。</p><p>CIの実行が終わった直後に気づけるようにしましょう。</p><p>最近のCIツールではメールやチャットなどに送ってくれるものもあります。</p><p>おすすめは常にディスプレイに表示しておいて、</p><p>失敗したら画面が真っ赤になったり、大きな音が出るなどをしておくことです。</p><p>また、場合によっては</p><ul><li>失敗した時には全員が手を止めて修正する</li></ul><p>ようなルールを追加しても良いと思います。</p><p>CIを正常に保つ意識をチーム全員が持つことができます。</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><h3 id="ciツールを入れることが継続的インテグレーションをやっていることにはならない" tabindex="-1"><a class="header-anchor" href="#ciツールを入れることが継続的インテグレーションをやっていることにはならない" aria-hidden="true">#</a> CIツールを入れることが継続的インテグレーションをやっていることにはならない</h3><p>「CIツールを入れること＝継続的インテグレーションができていること」にはなりません。</p><p>継続的インテグレーションはプラクティスであり、文化です。</p><p>失敗に気づいて、改善していくサイクルができないのであれば、</p><p>CIツールを入れてもあまり意味がなくなってしまいます。</p><h3 id="開発を開始する前に継続的インテグレーションを準備する" tabindex="-1"><a class="header-anchor" href="#開発を開始する前に継続的インテグレーションを準備する" aria-hidden="true">#</a> 開発を開始する前に継続的インテグレーションを準備する</h3><p>理想ではありますが、</p><p>できれば開発を開始する前に継続的インテグレーションが実施できるようにしましょう。</p><p>なぜ継続的インテグレーションをするのかの部分でも書きましたが、</p><p>品質を作り込むことが大事になります。</p><h3 id="テストがなくても実施する" tabindex="-1"><a class="header-anchor" href="#テストがなくても実施する" aria-hidden="true">#</a> テストがなくても実施する</h3><p>現状、テストが書かれていないアプリケーションであっても、</p><p>ビルドだけでもしておく価値はあります。</p><p>コードの修正により、ビルドができなくなるリスクを回避できます。</p><p>また、徐々にテストを増やしていくことで品質が向上していきます。</p><h3 id="改善をする" tabindex="-1"><a class="header-anchor" href="#改善をする" aria-hidden="true">#</a> 改善をする</h3><p>CI自体の改善をしましょう。</p><p>普段手作業でやっているようなことを</p><p>自動化できないか考えてみましょう。</p><p>例えば、下記のような改善です。</p><ul><li>テストが遅ければ失敗させて気づけるようにする</li><li>静的解析に問題があれば失敗させて気づけるようにする</li><li>パフォーマンス、セキュリティ、障害など各種自動化されたテストを組み込み、品質を作り込む</li></ul><h2 id="参考資料" tabindex="-1"><a class="header-anchor" href="#参考資料" aria-hidden="true">#</a> 参考資料</h2>',64),s={href:"https://amzn.to/2zE9blc",target:"_blank",rel:"noopener noreferrer"},l=a("h2",{id:"さいごに",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#さいごに","aria-hidden":"true"},"#"),e(" さいごに")],-1),u={href:"https://forms.gle/TKUJ2Gs9EoH2jQvp7",target:"_blank",rel:"noopener noreferrer"};function f(_,b){const r=n("ExternalLinkIcon");return p(),d("div",null,[o,a("ul",null,[a("li",null,[a("a",s,[e("継続的デリバリー 信頼できるソフトウェアリリースのためのビルド・テスト・デプロイメントの自動化"),i(r)])])]),l,a("p",null,[e("文章の改善のため、フィードバックがありましたら、"),a("a",u,[e("こちら"),i(r)]),e("からお願いいたします。")])])}const C=h(c,[["render",f],["__file","continuous-integration.html.vue"]]);export{C as default};
