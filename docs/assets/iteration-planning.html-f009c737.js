import{_ as h,r as i,o as n,c as d,b as e,d as a,e as p,a as t}from"./app-4ccbe196.js";const c={},s=t('<h1 id="スプリント-イテレーション-計画" tabindex="-1"><a class="header-anchor" href="#スプリント-イテレーション-計画" aria-hidden="true">#</a> スプリント（イテレーション）計画</h1><p>〜目標を明確にして、チームを集中させる〜</p><h2 id="言葉の説明" tabindex="-1"><a class="header-anchor" href="#言葉の説明" aria-hidden="true">#</a> 言葉の説明</h2><p>この文章では、アジャイル開発の用語が多いため、まず最初に言葉の説明をします。</p><h3 id="スプリント-イテレーション-とは" tabindex="-1"><a class="header-anchor" href="#スプリント-イテレーション-とは" aria-hidden="true">#</a> スプリント（イテレーション）とは</h3><p>スプリント（イテレーション）は、１〜４週間で固定された開発サイクルの時間単位のことです。</p><p>この時間単位はチームで自由に決めることができます。</p><h3 id="ストーリーとは" tabindex="-1"><a class="header-anchor" href="#ストーリーとは" aria-hidden="true">#</a> ストーリーとは</h3><p>ストーリーとは、実装する要件を意味します。</p><p>明確に完了の定義がされていることが必要です。</p><h2 id="スプリント計画とは" tabindex="-1"><a class="header-anchor" href="#スプリント計画とは" aria-hidden="true">#</a> スプリント計画とは</h2><p>開発チームがプロダクトオーナーと協力して、次のスプリントについての計画を行い、目標とその結果の認識を一致させるイベントです。</p><p>チームメンバーは、プロダクトオーナーのすべての受け入れ条件が満たされ、</p><p>完了の定義が満たされるレベルまで機能を提供するために、機能を細かいタスクに分解します。</p><p>その上で見積もり、次回のスプリントで完了できるのはどこまでかの認識を全員で合わせます。</p><h2 id="なぜスプリント計画をするのか" tabindex="-1"><a class="header-anchor" href="#なぜスプリント計画をするのか" aria-hidden="true">#</a> なぜスプリント計画をするのか</h2><p>スプリント計画は、チームの成功のために設定します。</p><p>終了日（締切日）が設定されている場合、チームは目標や活動により重点を置く傾向があり、作業を完了させる必要があります。</p><p>全体的なスプリント目標を念頭に置いて、チームを集中させ続け、プロジェクトを通しての進捗を確実なものとします。</p><p>また、スプリント計画をチームメンバーはスプリントに受け入れられる機能についてのプロダクトオーナーやステークホルダーの受け入れ基準についての共通の理解を深められ、</p><p>プロダクトの機能を提供するために必要なすべての作業タスクを決定することができます。</p><h2 id="どうやっておこなうのか" tabindex="-1"><a class="header-anchor" href="#どうやっておこなうのか" aria-hidden="true">#</a> どうやっておこなうのか</h2><p>一般的なスプリントの期間は１〜４週間です。</p><p>その期間の始まりの日にスプリント計画を開催します。</p><p>一般的にスプリント計画は１週間のスプリントで１時間、２週間だと２時間かかります。</p><h3 id="やり方" tabindex="-1"><a class="header-anchor" href="#やり方" aria-hidden="true">#</a> やり方</h3><ol><li>プロダクトオーナーが用意した優先度がつけられたストーリーを説明します。</li><li>各々、質問をします。</li><li>各ストーリーの担当を割り振ります。</li><li>次のスプリントで完成するストーリーについて認識を合わせます。</li></ol><p>アウトプットとして、次のスプリントで行うストーリーの一覧ができます。</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><h3 id="ストーリーの完了の定義を明確にしよう" tabindex="-1"><a class="header-anchor" href="#ストーリーの完了の定義を明確にしよう" aria-hidden="true">#</a> ストーリーの完了の定義を明確にしよう</h3><p>せっかくストーリーを完了させても実はプロダクトオーナーの思うストーリーと違った</p><p>なんてことにならないように最初に認識をきちんと合わせておきましょう。</p><p>例えば、極端ですが、「ユーザーがAIからアドバイスをもらうことができる」というストーリーを作ってしまうと</p><p>何を作ればいいのかが不明です。</p><p>チームで認識の合わせたストーリーが書かれていることが大切です。</p><h3 id="スプリントが終わったらふりかえりをしよう" tabindex="-1"><a class="header-anchor" href="#スプリントが終わったらふりかえりをしよう" aria-hidden="true">#</a> スプリントが終わったらふりかえりをしよう</h3><p>スプリント計画を行う前に</p><p>前回のスプリントの<a href="/practices/retrospectives">ふりかえり</a>をしておきましょう。</p><p>ただスプリントを繰り返しているだけでは、高い効果は見込めません。</p><p>ふりかえりをして、どうやればよりうまくいくのかを検証しましょう。</p><h3 id="見積もりを行う場合" tabindex="-1"><a class="header-anchor" href="#見積もりを行う場合" aria-hidden="true">#</a> 見積もりを行う場合</h3><p>チームの中で合意が取れていて、認識が一致していることが最も大事です。</p><p>この点を忘れずに見積もりを行なってください。</p><p>あるチームの見積もりでは３だったストーリーが違うチームだと１になることや１０になることもあります。</p><p>これはそのチームの状況、技術レベル、コードの品質などの様々な要因が異なるためです</p><p>他のチームとの比較や、他のチームが見積もったものをそのまま使うのはやめましょう。</p><h4 id="見積もり方法" tabindex="-1"><a class="header-anchor" href="#見積もり方法" aria-hidden="true">#</a> 見積もり方法</h4><p>実際に行う見積もりの方法を簡単にご紹介します。</p><p>見積もりは相対的に行います。</p><p>一般的な手法としては、プランニングポーカーです。</p><p>１、２、３、５、８、１３・・などのカードを使って相対的に見積もる方法です。</p><p>カードをメンバー全員で同時に出し、違うカードが出た場合は、話し合いを行います。</p><p>この数字はちょうどよい幅で数字が区切られているため、</p><p>意見が割れた際に議論をしやすくなります。</p><p>また、Tシャツのサイズを使って、S（小さい）、M（普通）、L（大きい）、XL（とても大きい）や</p><p>果物を使って、さくらんぼ（小さい）、林檎（普通）、スイカ（大きい）</p><p>などを使ったものでも、チームの認識さえ揃っていれば問題ありません。</p><h3 id="スプリント計画は安定と継続可能性を意識しよう" tabindex="-1"><a class="header-anchor" href="#スプリント計画は安定と継続可能性を意識しよう" aria-hidden="true">#</a> スプリント計画は安定と継続可能性を意識しよう</h3><p>今のチームがスプリントでどの程度のストーリーを終えられるのかを学ぶことが大事であり、</p><p>スプリント計画を終わらせることを重視しぎてはいけません。</p><p>残業や無理をして終わらせたとしても、短期的には計画通りに行くのでよいかもしれませんが、</p><p>中長期的にはチームが疲弊して安定したストーリーの消化が難しくなってしまう可能性があります。</p><p>予定では終わるはずだったのに終わらなかった場合は<a href="/practices/retrospectives">ふりかえり</a>の際に、</p><p>なぜ終わらなかったのか、ストーリーが大きすぎたのではないか、もっと工夫すべき点はないのか、チームで協力できたことはないのかなどを見直していくことが大切です。</p><p>また、何か問題が発生して終わらなくなりそうな場合には、それがわかった段階でチームに共有して解決をするのが適切です。</p><p>継続的に改善していくことで、徐々に上手にはやくDeliveryすることが可能になります。</p><h2 id="参考資料" tabindex="-1"><a class="header-anchor" href="#参考資料" aria-hidden="true">#</a> 参考資料</h2>',67),o={href:"https://openpracticelibrary.com/practice/iteration-planning/",target:"_blank",rel:"noopener noreferrer"},l=e("h2",{id:"さいごに",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#さいごに","aria-hidden":"true"},"#"),a(" さいごに")],-1),f={href:"https://forms.gle/TKUJ2Gs9EoH2jQvp7",target:"_blank",rel:"noopener noreferrer"};function u(_,x){const r=i("ExternalLinkIcon");return n(),d("div",null,[s,e("ul",null,[e("li",null,[e("a",o,[a("Iteration (Sprint) Planning"),p(r)])])]),l,e("p",null,[a("文章の改善のため、フィードバックや質問などありましたら、"),e("a",f,[a("こちら"),p(r)]),a("からお願いいたします。")])])}const m=h(c,[["render",u],["__file","iteration-planning.html.vue"]]);export{m as default};
